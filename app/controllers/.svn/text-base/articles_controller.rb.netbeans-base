class ArticlesController < ApplicationController
  before_filter :check_editor_role, :except => [:index, :show]
  
  uses_tiny_mce
  
  uses_tiny_mce(:options => {:theme => 'advanced',
                           :width => "750",
                           :height => "200",
                           :mode => 'textareas',
                           :browsers => %w{msie gecko},
                           :theme_advanced_toolbar_location => "top",
                           :theme_advanced_toolbar_align => "left",
                           :theme_advanced_resizing => true,
                           :theme_advanced_resize_horizontal => false,
                           :paste_auto_cleanup_on_paste => true,
                           :theme_advanced_buttons1 =>%w{formatselect fontselect fontsizeselect bold italic underline strikethrough separator justifyleft justifycenter justifyright indent outdent separator bullist numlist forecolor backcolor separator link unlink image undo redo},
                           :theme_advanced_buttons2 => [],
                           :theme_advanced_buttons3 => [],
                           :plugins => %w{contextmenu paste}},
              :only => [:new, :edit])
  
  def index
    if params[:category_id]
      @articles_pages, @articles = paginate(:articles,
      :include => :user,
      :order => 'published_at DESC',
      :conditions => ["category_id=? AND published=?",params[:category_id].to_i,true])
    else
      @articles = Article.find_all_by_published(true)
      @articles_pages, @articles = paginate(:articles,
       :include => :user,
       :order => 'published_at DESC',
       :conditions => ["published = ?", true])
    end
    respond_to do |wants|
      wants.html
      wants.xml  {render :xml => @articles.to_xml }
      wants.rss { render :action => 'rss.xml', :layout => false }
      wants.atom { render :action => 'atom.rxml', :layout => false }
    end
  end

  def show
    if is_logged_in? && @logged_in_user.has_role?('Editor')
      @article = Article.find(params[:id])
    else
      @article = Article.find_by_id_and_published(params[:id], true)
    end
    respond_to do |wants|
      wants.html
      wants.xml { render :xml => @article.to_xml }
    end
  end

  def new
    @article = Article.new
  end

  def create
    @article = Article.create(params[:article])
    @logged_in_user.articles << @article
    respond_to do |wants|
      wants.html { redirect_to admin_articles_url }
      wants.xml { render :xml => @articles.to_xml }
    end
  end

  def edit
    @article = Article.find(params[:id])
  end

  def update
    @article = Article.find(params[:id])
    @article.update_attributes(params[:article])
    respond_to do |wants|
      wants.html { redirect_to admin_articles_url }
      wants.xml { render :xml => @article.to_xml }
    end    
  end

  def destroy
    @article = Article.find(params[:id])
    @article.destroy
    respond_to do |wants|
      wants.html { redirect_to admin_articles_url }
      wants.xml { render :nothing => true }
    end
  end

  def admin
    @articles_pages, @articles = paginate(:articles, :order => 'published_at DESC')
  end

end
